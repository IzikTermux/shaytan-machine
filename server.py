from flask import Flask, send_file, request, jsonify
from flask_cors import CORS
import json
import os
import telebot
import logging
import sys
from datetime import datetime, timedelta
import tempfile

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    stream=sys.stdout
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥
GLOBAL_CONFIG = {
    "special_mode": False,
    "special_students": {},
    "mode_expires_at": None,
    "salted_student": None
}

def save_config(config):
    try:
        global GLOBAL_CONFIG
        logger.info(f"–°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥ –≤ –ø–∞–º—è—Ç—å: {config}")
        GLOBAL_CONFIG.update(config)
        logger.info(f"–ö–æ–Ω—Ñ–∏–≥ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {GLOBAL_CONFIG}")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞: {e}", exc_info=True)
        return False

def load_config():
    try:
        global GLOBAL_CONFIG
        logger.info(f"–ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –∏–∑ –ø–∞–º—è—Ç–∏: {GLOBAL_CONFIG}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–æ –ª–∏ –≤—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è —Ä–µ–∂–∏–º–∞
        if GLOBAL_CONFIG.get('mode_expires_at'):
            expires_at = datetime.fromisoformat(GLOBAL_CONFIG['mode_expires_at'])
            if datetime.now() > expires_at:
                GLOBAL_CONFIG['special_mode'] = False
                GLOBAL_CONFIG['mode_expires_at'] = None
                logger.info("–í—Ä–µ–º—è —Ä–µ–∂–∏–º–∞ –∏—Å—Ç–µ–∫–ª–æ, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º")
                
        return GLOBAL_CONFIG.copy()  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ø–∏—é –∫–æ–Ω—Ñ–∏–≥–∞
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥–∞: {e}", exc_info=True)
        return {
            "special_mode": False,
            "special_students": {},
            "mode_expires_at": None,
            "salted_student": None
        }

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
TOKEN = '7512260695:AAGRESRxQglZSb0mTFQri6ZFOha8PakUstA'
bot = telebot.TeleBot(TOKEN, threaded=False)

app = Flask(__name__)
CORS(app)

# –î–æ–±–∞–≤–∏–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–æ—Ä—Ç–∞ –¥–ª—è Render
port = int(os.environ.get('PORT', 10000))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞
from bot import *

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ
@app.before_first_request
def set_webhook():
    WEBHOOK_URL = os.environ.get('WEBHOOK_URL', 'https://shaytan-web.onrender.com')
    url = f"{WEBHOOK_URL}/{TOKEN}"
    try:
        logger.info("–ù–∞—á–∏–Ω–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤–µ–±—Ö—É–∫–∞...")
        bot.remove_webhook()
        bot.set_webhook(url=url)
        logger.info(f"–í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {url}")
        
        try:
            bot.send_message(1228708306, f"üöÄ –ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω\nWebhook URL: {url}")
            logger.info("–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞: {e}")

@app.route(f'/{TOKEN}', methods=['POST'])
def webhook():
    if request.headers.get('content-type') == 'application/json':
        try:
            logger.info("–ü–æ–ª—É—á–µ–Ω webhook –∑–∞–ø—Ä–æ—Å –æ—Ç Telegram")
            json_string = request.get_data().decode('utf-8')
            logger.info(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–ø—Ä–æ—Å–∞: {json_string}")
            
            update = telebot.types.Update.de_json(json_string)
            
            if update.message:
                logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {update.message.text}")
            elif update.callback_query:
                logger.info(f"–ü–æ–ª—É—á–µ–Ω callback_query: {update.callback_query.data}")
            
            bot.process_new_updates([update])
            logger.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
            return 'ok', 200
            
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞", exc_info=True)
            return str(e), 500
    return 'error', 403

@app.route('/')
def serve_html():
    return send_file('main.html')

@app.route('/config.json')
def serve_config():
    config = load_config()
    logger.info(f"–û—Ç–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥: {config}")
    return jsonify(config)

@app.route('/update_config', methods=['POST'])
def update_config():
    try:
        config = request.json
        if save_config(config):
            return jsonify({"success": True, "config": load_config()})
        else:
            return jsonify({"success": False, "error": "Failed to save config"}), 500
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞: {e}", exc_info=True)
        return jsonify({"success": False, "error": str(e)}), 500

@app.route('/test')
def test():
    try:
        bot.send_message(1228708306, "üîÑ –¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
        return "OK", 200
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}", exc_info=True)
        return str(e), 500

@app.route('/test_special')
def test_special():
    try:
        config = load_config()
        expires_at = datetime.now() + timedelta(minutes=5)
        
        config['special_mode'] = True
        config['mode_expires_at'] = expires_at.isoformat()
        
        if save_config(config):
            logger.info(f"–†–µ–∂–∏–º —Å–≤–æ–∏ –≤–∫–ª—é—á–µ–Ω –¥–æ {expires_at}")
            return jsonify({
                "status": "success",
                "message": "–†–µ–∂–∏–º —Å–≤–æ–∏ –≤–∫–ª—é—á–µ–Ω –Ω–∞ 5 –º–∏–Ω—É—Ç",
                "expires_at": expires_at.isoformat(),
                "config": load_config()
            })
        else:
            return jsonify({"status": "error", "message": "Failed to save config"}), 500
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ —Ä–µ–∂–∏–º–∞ —Å–≤–æ–∏: {e}", exc_info=True)
        return jsonify({"error": str(e)}), 500

@app.before_first_request
def check_permissions():
    try:
        logger.info(f"–í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {tempfile.gettempdir()}")
        logger.info(f"–¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
        logger.info(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {os.listdir()}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        test_file = os.path.join(tempfile.gettempdir(), 'test_write.tmp')
        with open(test_file, 'w') as f:
            f.write('test')
        os.remove(test_file)
        logger.info("–ü—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å—Ç—å")
        
    except Exception as e:
        logger.error(f"–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞: {e}", exc_info=True)

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=port)
