import telebot
from telebot import types
import json
import time
from datetime import datetime, timedelta
from telebot.handler_backends import State, StatesGroup
from telebot.storage import StateMemoryStorage
import logging

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–º–µ–Ω–∏—Ç–µ 'YOUR_BOT_TOKEN' –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç @BotFather
TOKEN = '7512260695:AAGRESRxQglZSb0mTFQri6ZFOha8PakUstA'
state_storage = StateMemoryStorage()
bot = telebot.TeleBot(TOKEN, state_storage=state_storage)

waiting_for_number = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

def load_config():
    try:
        with open('config.json', 'r') as f:
            config = json.load(f)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–æ –ª–∏ –≤—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è —Ä–µ–∂–∏–º–∞
            if config['mode_expires_at']:
                expires_at = datetime.fromisoformat(config['mode_expires_at'])
                if datetime.now() > expires_at:
                    config['special_mode'] = False
                    config['mode_expires_at'] = None
                    save_config(config)
            return config
    except:
        return {"special_mode": False, "special_students": {}, "mode_expires_at": None}

def save_config(config):
    with open('config.json', 'w') as f:
        json.dump(config, f, indent=4)

# –ó–∞–º–µ–Ω–∏–º —Ñ—É–Ω–∫—Ü–∏—é load_students –Ω–∞ –ø—Ä—è–º–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞
STUDENTS = [
    "1 –ê–ª–∏—Å–∞—Ñ–∞ –ê–ª–µ—Å–∫–µ—Ä–æ–≤",
    "2 –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ë–∞–Ω–∑–∞–∫–æ–≤",
    "3 –†–æ–º–∞–Ω –ë–∏—Ä—Ñ–µ–ª—å–¥",
    "4 –ì–µ–æ—Ä–≥–∏–π –ë–ª–∞–≥–æ—á–µ–≤—Å–∫–∏–π",
    "5 –ê—Ä—Ç–µ–º –ë—É–ª–∞—Ç–æ–≤",
    "6 –ö–∏—Ä–∏–ª–ª –í–∞–ª—É–π—Å–∫–∏–π",
    "7 –î–º–∏—Ç—Ä–∏–π –ì—Ä–∏–±–∫–æ–≤",
    "8 –î–∞–Ω–∏–∏–ª –î–∞–Ω–∏–ª–∏–Ω",
    "9 –î–∞—Ä–∏–π –î–∞—Ü–µ–Ω–∫–æ–≤",
    "10 –ò–≤–∞–Ω –î–æ–ª–≥–æ–ø–æ–ª–æ–≤",
    "11 –í—è—á–µ—Å–ª–∞–≤ –î–æ–º–Ω–∏–Ω",
    "12 –Ø—Ä–æ—Å–ª–∞–≤ –î—Ä–æ–∑–¥–æ–≤",
    "13 –ü–æ–ª–∏–Ω–∞ –ï–≥–æ—Ä–æ–≤–∞",
    "14 –î–∞—Ä—å—è –ñ–µ—Ä–¥–µ–≤–∞",
    "15 –ò–ª—å—è –ò–∑—Ä–∞–∑—Ü–æ–≤",
    "16 –ú–∏—Ö–∞–∏–ª –ö–∞–∑–∞–∫–æ–≤",
    "17 –ê–Ω—Ç–æ–Ω –ö–æ–≤—è–∑–∏–Ω",
    "18 –ê–Ω–¥—Ä–µ–π –ö—Ä–∞–≤—á–µ–Ω–∫–æ",
    "19 –ú–∏—Ö–∞–∏–ª –ö—É–∑–Ω–µ—Ü–æ–≤",
    "20 –ú–∏—Ö–∞–∏–ª –õ—é–∫–µ–≤–∏—á",
    "21 –ï–ª–∏–∑–∞–≤–µ—Ç–∞ –ü–µ—Ç–∏–Ω–∞",
    "22 –ê—Ä–º–∞–Ω –°—Ç—Ä–æ–π–Ω–æ–≤",
    "23 –ë–æ—Ä–∏—Å –°—Ç—É–ø–∏–Ω",
    "24 –°—Ç–µ–ø–∞–Ω –¢–∏—Ö–æ–º–∏—Ä–æ–≤",
    "25 –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –®–º–µ–ª–µ–≤"
]

# –ó–∞–º–µ–Ω–∏–º —Ñ—É–Ω–∫—Ü–∏—é load_students –Ω–∞ –Ω–æ–≤—É—é
def load_students():
    return STUDENTS

# –î–æ–±–∞–≤—å—Ç–µ –∫–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π
class BotStates(StatesGroup):
    waiting_for_number = State()

@bot.message_handler(commands=['start'])
def send_welcome(message):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç {message.from_user.id}")
    try:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        show_students_btn = types.KeyboardButton('–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤')
        special_mode_btn = types.KeyboardButton('üé≤ –†–µ–∂–∏–º —Å–≤–æ–∏')
        salt_btn = types.KeyboardButton('üéØ –ù–∞—Å–æ–ª–∏—Ç—å')
        markup.add(show_students_btn, special_mode_btn, salt_btn)
        
        welcome_text = (
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —à–∞–π—Ç–∞–Ω-–º–∞—à–∏–Ω–æ–π.\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/students - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤\n"
            "/special - –≤–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º —Å–≤–æ–∏\n"
            "/status - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ä–µ–∂–∏–º–∞\n"
            "/salt - –Ω–∞—Å–æ–ª–∏—Ç—å —É—á–µ–Ω–∏–∫–∞"
        )
        bot.reply_to(message, welcome_text, reply_markup=markup)
        logger.info("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start: {e}")

@bot.message_handler(commands=['special'])
@bot.message_handler(func=lambda message: message.text == 'üé≤ –†–µ–∂–∏–º —Å–≤–æ–∏')
def special_mode_menu(message):
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton("15 –º–∏–Ω—É—Ç", callback_data="special_15"),
        types.InlineKeyboardButton("30 –º–∏–Ω—É—Ç", callback_data="special_30"),
        types.InlineKeyboardButton("45 –º–∏–Ω—É—Ç", callback_data="special_45")
    )
    markup.row(types.InlineKeyboardButton("–í—ã–∫–ª—é—á–∏—Ç—å", callback_data="special_off"))
    
    bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è —Ä–µ–∂–∏–º–∞:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('special_'))
def handle_special_mode(call):
    config = load_config()
    
    if call.data == "special_off":
        config['special_mode'] = False
        config['mode_expires_at'] = None
        save_config(config)
        bot.answer_callback_query(call.id, "–†–µ–∂–∏–º —Å–≤–æ–∏ –≤—ã–∫–ª—é—á–µ–Ω ‚ùå")
        bot.edit_message_text("–†–µ–∂–∏–º —Å–≤–æ–∏ –≤—ã–∫–ª—é—á–µ–Ω ‚ùå", 
                            call.message.chat.id, 
                            call.message.message_id)
        return

    minutes = int(call.data.split('_')[1])
    expires_at = datetime.now() + timedelta(minutes=minutes)
    
    config['special_mode'] = True
    config['mode_expires_at'] = expires_at.isoformat()
    save_config(config)
    
    bot.answer_callback_query(call.id, f"–†–µ–∂–∏–º —Å–≤–æ–∏ –≤–∫–ª—é—á–µ–Ω –Ω–∞ {minutes} –º–∏–Ω—É—Ç ‚úÖ")
    bot.edit_message_text(f"–†–µ–∂–∏–º —Å–≤–æ–∏ –≤–∫–ª—é—á–µ–Ω –Ω–∞ {minutes} –º–∏–Ω—É—Ç ‚úÖ\n" +
                         f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expires_at.strftime('%H:%M:%S')}", 
                         call.message.chat.id, 
                         call.message.message_id)

@bot.message_handler(commands=['status'])
def check_status(message):
    config = load_config()
    if config['special_mode']:
        expires_at = datetime.fromisoformat(config['mode_expires_at'])
        remaining = expires_at - datetime.now()
        minutes = remaining.seconds // 60
        seconds = remaining.seconds % 60
        bot.reply_to(message, 
                    f"‚úÖ –†–µ–∂–∏–º —Å–≤–æ–∏ –≤–∫–ª—é—á–µ–Ω\n" +
                    f"–û—Å—Ç–∞–ª–æ—Å—å: {minutes}:{seconds:02d}\n" +
                    f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expires_at.strftime('%H:%M:%S')}")
    else:
        bot.reply_to(message, "‚ùå –†–µ–∂–∏–º —Å–≤–æ–∏ –≤—ã–∫–ª—é—á–µ–Ω")

@bot.message_handler(commands=['students'])
@bot.message_handler(func=lambda message: message.text == '–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤')
def show_students(message):
    students = load_students()
    students_text = "üìù –°–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤:\n\n" + "\n".join(students)
    bot.reply_to(message, students_text)

@bot.message_handler(commands=['salt'])
@bot.message_handler(func=lambda message: message.text == 'üéØ –ù–∞—Å–æ–ª–∏—Ç—å')
def salt_student_command(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    show_students_btn = types.KeyboardButton('–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤')
    special_mode_btn = types.KeyboardButton('üé≤ –†–µ–∂–∏–º —Å–≤–æ–∏')
    salt_btn = types.KeyboardButton('üéØ –ù–∞—Å–æ–ª–∏—Ç—å')
    markup.add(show_students_btn, special_mode_btn, salt_btn)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–º–µ—Ä–∞
    waiting_for_number[message.chat.id] = True
    
    bot.reply_to(message, 
                 "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —É—á–µ–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—Å–æ–ª–∏—Ç—å üòà\n" +
                 "–≠—Ç–æ—Ç —É—á–µ–Ω–∏–∫ –±—É–¥–µ—Ç –≤—ã–±—Ä–∞–Ω —Å–ª–µ–¥—É—é—â–∏–º —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 100%",
                 reply_markup=markup)

@bot.message_handler(func=lambda message: message.chat.id in waiting_for_number)
def handle_student_number(message):
    try:
        print(f"–ü–æ–ª—É—á–µ–Ω –Ω–æ–º–µ—Ä: {message.text}")  # –û—Ç–ª–∞–¥–∫–∞
        number = message.text.strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥—ë–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –Ω–æ–º–µ—Ä
        students = load_students()
        print(f"–ó–∞–≥—Ä—É–∂–µ–Ω —Å–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤: {len(students)} —É—á–µ–Ω–∏–∫–æ–≤")  # –û—Ç–ª–∞–¥–∫–∞
        
        valid_numbers = [s.split()[0] for s in students]
        print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–æ–º–µ—Ä–∞: {valid_numbers}")  # –û—Ç–ª–∞–¥–∫–∞
        
        if number not in valid_numbers:
            print(f"–ù–æ–º–µ—Ä {number} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ")  # –û—Ç–ª–∞–¥–∫–∞
            bot.reply_to(message, f"‚ùå –£—á–µ–Ω–∏–∫ —Å –Ω–æ–º–µ—Ä–æ–º {number} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        print(f"–ù–æ–º–µ—Ä {number} –Ω–∞–π–¥–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥")  # –û—Ç–ª–∞–¥–∫–∞
        config = load_config()
        config['salted_student'] = number
        save_config(config)
        
        # –ù–∞—Ö–æ–¥–∏–º –∏–º—è —É—á–µ–Ω–∏–∫–∞
        student_name = next(s for s in students if s.split()[0] == number)
        print(f"–ù–∞–π–¥–µ–Ω —É—á–µ–Ω–∏–∫: {student_name}")  # –û—Ç–ª–∞–¥–∫–∞
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        response = f"üòà –ü–æ–∫–∞-–ø–æ–∫–∞, {' '.join(student_name.split()[1:])}"
        print(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç: {response}")  # –û—Ç–ª–∞–¥–∫–∞
        bot.reply_to(message, response)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
        del waiting_for_number[message.chat.id]
        print("–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ")  # –û—Ç–ª–∞–¥–∫–∞
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–º–µ—Ä–∞: {e}")  # –û—Ç–ª–∞–¥–∫–∞
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä —É—á–µ–Ω–∏–∫–∞")
        if message.chat.id in waiting_for_number:
            del waiting_for_number[message.chat.id]

# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    # –£–±–∏—Ä–∞–µ–º bot.infinity_polling(), —Ç–∞–∫ –∫–∞–∫ –±–æ—Ç –±—É–¥–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –∏–∑ server.py
